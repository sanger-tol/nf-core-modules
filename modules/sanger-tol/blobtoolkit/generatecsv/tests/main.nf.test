nextflow_process {

    name "Test Process BLOBTOOLKIT_GENERATECSV"
    script "../main.nf"
    process "BLOBTOOLKIT_GENERATECSV"

    tag "modules"
    tag "modules_sangertol"
    tag "sangertol"
    tag "blobtoolkit/generatecsv"

    test("pacbio fasta.gz to csv") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', data_type:'pacbio', library_layout: 'SINGLE' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'resources/ascc/asccTinyTest_V2/pacbio/Pyoeliiyoelii17XNL_pbtools_simulated_pacbio_reads.fa.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'resources/treeval/TreeValTinyData/genomic_data/pacbio/seqkitPacbio50000.fasta.gz', checkIfExists: true)
                    ]
                ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("ont fasta.gz to csv") {

        when {
            process {
                """
                input[0] = [[],[]]
                input[1] = [
                    [ id:'test', data_type:'ont', library_layout: 'SINGLE' ], // meta map
                    [ file(params.modules_testdata_base_path + 'resources/ascc/asccTinyTest_V2/pacbio/Pyoeliiyoelii17XNL_pbtools_simulated_pacbio_reads.fa.gz', checkIfExists: true) ]
                ]
                input[2] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("multiple fasta.gz to csv") {

        when {
            process {
                """
                input[0] = [[],[]]
                input[1] = [
                    [ id:'test', data_type:'ont', library_layout: 'SINGLE' ], // meta map
                    [ file(params.modules_testdata_base_path + 'resources/ascc/asccTinyTest_V2/pacbio/Pyoeliiyoelii17XNL_pbtools_simulated_pacbio_reads.fa.gz', checkIfExists: true) ]
                ]
                input[2] = [
                    [ id:'test', data_type:'illumina', library_layout: 'SINGLE' ], // meta map
                    [ file(params.modules_testdata_base_path + 'resources/treeval/TreeValTinyData/genomic_data/pacbio/seqkitPacbio50000.fasta.gz', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
