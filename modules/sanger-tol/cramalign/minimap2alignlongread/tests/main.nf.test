// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test minimap2alignlongread
nextflow_process {

    name "Test Process CRAMALIGN_MINIMAP2ALIGNLONGREAD"
    script "../main.nf"
    process "CRAMALIGN_MINIMAP2ALIGNLONGREAD"

    tag "modules"
    tag "modules_sangertol"
    tag "minimap2/index"
    tag "cramalign"
    tag "cramalign/minimap2alignlongread"
    tag "nf-core/minimap2/index"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall("${launchDir}/library/", ["minimap2/index"])
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules")

        run("MINIMAP2_INDEX") {
            script "../../../../nf-core/minimap2/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id: "test" ],
                    file(params.modules_testdata_base_path + 'Meles_meles/assembly/release/mMelMel3.1_paternal_haplotype/GCA_922984935.2.subset.fasta.gz', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("Meles meles - ONT reads") {
        config "./nextflow.config"

        when {

            params {
                samtools_cat_args   = ""
                samtools_fastq_args = "-F0x200 -nt"
                minimap2_args       = "-ax map-ont"
                samtools_sort_args  = "--write-index -l1"
            }

            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/ont/PAE35587_pass_1f1f0707_115.subset.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/ont/PAE35587_pass_1f1f0707_115.subset.cram.crai', checkIfExists: true),
                    1,
                    [0, 15],
                ]).join(MINIMAP2_INDEX.out.index)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        bam(process.out.bam.get(0).get(1)).getReadsMD5(),
                        process.out.versions
                    ).match()
                }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules")
        }
    }

    test("Meles meles - PacBio HiFi reads") {
        config "./nextflow.config"

        when {

            params {
                samtools_cat_args   = ""
                samtools_fastq_args = "-F0x200 -nt"
                minimap2_args       = "-ax map-hifi"
                samtools_sort_args  = "--write-index -l1"
            }

            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/pacbio/m64094_200911_174739.ccs.bc1022_BAK8B_OA--bc1022_BAK8B_OA.subset.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/pacbio/m64094_200911_174739.ccs.bc1022_BAK8B_OA--bc1022_BAK8B_OA.subset.cram.crai', checkIfExists: true),
                    1,
                    [0, 15],
                ]).join(MINIMAP2_INDEX.out.index)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    assert snapshot(
                        bam(process.out.bam.get(0).get(1)).getReadsMD5(),
                        process.out.versions
                    ).match()
                }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules")
        }
    }

    test("meles meles - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/ont/PAE35587_pass_1f1f0707_115.subset.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/ont/PAE35587_pass_1f1f0707_115.subset.cram.crai', checkIfExists: true),
                    1,
                    [0, 1],
                ]).join(MINIMAP2_INDEX.out.index)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules")
        }

    }
}
