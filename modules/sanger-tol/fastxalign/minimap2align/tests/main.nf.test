nextflow_process {

    name "Test Process FASTXALIGN_MINIMAP2ALIGN"
    script "../main.nf"
    process "FASTXALIGN_MINIMAP2ALIGN"

    tag "modules"
    tag "modules_sangertol"
    tag "fastxalign"
    tag "fastxalign/pyfastxindexfasta"
    tag "fastxalign/minimap2align"

    config "./nextflow.config"

    setup {
        run("FASTXALIGN_PYFASTXINDEXFASTA") {
            script "../../pyfastxindexfasta/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id: "test" ],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("Undibacterium_unclassified - fasta - bam out - no filter") {

        when {

            params {
                minimap2_args      = "-x map-hifi"
                samtools_view_args = ""
                samtools_sort_args = "--write-index -l1"
            }

            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                    0,
                    [0, 500],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.fa.gz', checkIfExists: true)
                ]).combine(FASTXALIGN_PYFASTXINDEXFASTA.out.index, by: 0)
                .map { meta, reads, chunkn, range, reference, index, count ->
                    [ meta, reads, index, chunkn, range, reference ]
                }
                input[1] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1)).getStatistics(),
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("Undibacterium_unclassified - fasta - bam out - filter") {

        when {

            params {
                minimap2_args      = "-x map-hifi"
                samtools_view_args = "-F 0x904"
                samtools_sort_args = "--write-index -l1"
            }

            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                    0,
                    [0, 500],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.fa.gz', checkIfExists: true)
                ]).combine(FASTXALIGN_PYFASTXINDEXFASTA.out.index, by: 0)
                .map { meta, reads, chunkn, range, reference, index, count ->
                    [ meta, reads, index, chunkn, range, reference ]
                }
                input[1] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam.get(0).get(1)).getStatistics(),
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("Undibacterium_unclassified - fasta - paf out") {

        when {

            params {
                minimap2_args      = "-x map-hifi"
                samtools_view_args = ""
                samtools_sort_args = ""
            }

            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                    0,
                    [0, 500],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.fa.gz', checkIfExists: true)
                ]).combine(FASTXALIGN_PYFASTXINDEXFASTA.out.index, by: 0)
                .map { meta, reads, chunkn, range, reference, index, count ->
                    [ meta, reads, index, chunkn, range, reference ]
                }
                input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {

            params {
                minimap2_args      = ""
                samtools_view_args = ""
                samtools_sort_args = ""
            }

            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                    0,
                    [0, 500],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.fa.gz', checkIfExists: true)
                ]).combine(FASTXALIGN_PYFASTXINDEXFASTA.out.index, by: 0)
                .map { meta, reads, chunkn, range, reference, index, count ->
                    [ meta, reads, index, chunkn, range, reference ]
                }
                input[1] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
