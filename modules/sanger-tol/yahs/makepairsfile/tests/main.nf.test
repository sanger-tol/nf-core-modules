nextflow_process {

    name "Test Process YAHS_MAKEPAIRSFILE"
    script "../main.nf"
    process "YAHS_MAKEPAIRSFILE"

    tag "modules"
    tag "modules_sangertol"
    tag "yahs"
    tag "yahs/makepairsfile"

    test("Undibacterium unclassified - YaHS bin") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/analysis/scaffolding/baUndUnlc1_hic_phased_hap2_scaffolds_final.fa.fai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'baUndUnlc1_hic_phased_hap2_scaffolds_final.agp', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'baUndUnlc1.hic.hap2.p_ctg.fa.fai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'baUndUnlc1_hic_phased_hap2.bin', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success               },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("Undibacterium unclassified - YaHS bin - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/analysis/scaffolding/baUndUnlc1_hic_phased_hap2_scaffolds_final.fa.fai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'baUndUnlc1_hic_phased_hap2_scaffolds_final.agp', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'baUndUnlc1.hic.hap2.p_ctg.fa.fai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'baUndUnlc1_hic_phased_hap2.bin', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success               },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
