nextflow_workflow {

    name "Test Subworkflow BAM_SAMTOOLS_MERGE_MARKDUP"
    script "../main.nf"
    workflow "BAM_SAMTOOLS_MERGE_MARKDUP"

    tag "subworkflows"
    tag "subworkflows_sangertol"
    tag "subworkflows/bam_samtools_merge_markdup"
    tag "samtools"
    tag "subworkflows/../../modules/nf-core/samtools/faidx"
    tag "subworkflows/../../modules/nf-core/samtools/merge"
    tag "subworkflows/../../modules/nf-core/samtools/markdup"

    config "./nextflow.config"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall(
            "${launchDir}/library/",
            [
                "samtools/merge",
                "samtools/markdup",
                "samtools/faidx"
            ]
        )
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules/")
    }

    test("Undibacterium unclassified - hap1 - no markdup") {

        when {

            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/analysis/hic_mapping/41741_2.7.sub.cram.baUndUnlc1_hic_phased_hap1.2.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/analysis/hic_mapping/41741_2.7.sub.cram.baUndUnlc1_hic_phased_hap1.3.bam', checkIfExists: true),
                    ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.unscaffolded.fa.gz', checkIfExists: true),
                ])
                input[2] = false
                """
            }
        }

        then {

            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.bam.collect { bam(it.get(1)).getStatistics() },
                    workflow.out.versions
                ).match() }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }

    }

    test("Undibacterium unclassified - hap1 - markdup") {

        when {

            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/analysis/hic_mapping/41741_2.7.sub.cram.baUndUnlc1_hic_phased_hap1.2.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/analysis/hic_mapping/41741_2.7.sub.cram.baUndUnlc1_hic_phased_hap1.3.bam', checkIfExists: true),
                    ]
                ])
                input[1] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.unscaffolded.fa.gz', checkIfExists: true),
                ])
                input[2] = true
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.bam.collect { bam(it.get(1)).getStatistics() },
                    workflow.out.versions
                ).match() }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }

    }
}
