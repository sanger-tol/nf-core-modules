nextflow_workflow {

    name "Test Subworkflow FASTA_PURGE_RETAINED_HAPLOTYPE"
    script "../main.nf"
    workflow "FASTA_PURGE_RETAINED_HAPLOTYPE"

    tag "subworkflows"
    tag "subworkflows_sangertol"
    tag "subworkflows/fasta_purge_retained_haplotype"
    tag "subworkflows/fastx_map_long_reads"
    tag "subworkflows/../../modules/nf-core/minimap2/align"
    tag "subworkflows/../../modules/nf-core/purgedups/pbcstat"
    tag "subworkflows/../../modules/nf-core/purgedups/splitfa"
    tag "subworkflows/../../modules/nf-core/purgedups/getseqs"
    tag "subworkflows/../../modules/nf-core/purgedups/purgedups"
    tag "subworkflows/../../modules/nf-core/purgedups/calcuts"
    tag "subworkflows/../../modules/nf-core/cat/cat"

    config "./nextflow.config"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall(
            "${launchDir}/library/",
            [
                "cat/cat",
                "minimap2/align",
                "minimap2/index",
                "samtools/merge",
                "samtools/markdup",
                "samtools/faidx",
                "purgedups/calcuts",
                "purgedups/getseqs",
                "purgedups/histplot",
                "purgedups/pbcstat",
                "purgedups/purgedups",
                "purgedups/splitfa"
            ]
        )
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules/")
    }

    test("Undibacterium unclassified - hap1/hap2 - hifi") {

        when {

            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id: 'test' ], // meta map
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.fa.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap2.p_ctg.fa.gz', checkIfExists: true),
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id: 'test' ],
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                    ]
                )
                input[2] = 200
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out
                ).match() }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }

    }

    test("Undibacterium unclassified - hap1 only - hifi") {

        when {

            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id: 'test' ], // meta map
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.fa.gz', checkIfExists: true),
                        [],
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id: 'test' ],
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                    ]
                )
                input[2] = 200
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out
                ).match() }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }

    }

}
