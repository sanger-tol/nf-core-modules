nextflow_workflow {

    name "Test Subworkflow FASTA_PURGE_RETAINED_HAPLOTYPE"
    script "../main.nf"
    workflow "FASTA_PURGE_RETAINED_HAPLOTYPE"

    tag "subworkflows"
    tag "subworkflows_sangertol"
    tag "subworkflows/fasta_purge_retained_haplotype"
    tag "subworkflows/fastx_map_long_reads"
    tag "samtools"
    tag "samtools/sort"
    tag "samtools/index"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall(
            "${launchDir}/library/",
            [
                "cat/cat",
                "minimap2/index",
                "samtools/merge",
                "samtools/markdup",
                "samtools/faidx",
                "purgedups/calcuts",
                "purgedups/getseqs",
                "purgedups/pbcstat",
                "purgedups/purgedups",
                "purgedups/splitfa"
            ]
        )
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules/")
    }

    test("sarscov2 - bam - single_end") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id: 'test' ], // meta map
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.fa.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap2.p_ctg.fa.gz', checkIfExists: true),
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id: 'test' ],
                        file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                    ]
                )
                """
            }
        }
        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out
                    //TODO nf-core: Add all required assertions to verify the test output.
                ).match() }
            )
        }
    }
}
