nextflow_workflow {

    name "Test Subworkflow FASTX_MAP_LONG_READS"
    script "../main.nf"
    workflow "FASTX_MAP_LONG_READS"

    tag "subworkflows"
    tag "subworkflows_sangertol"
    tag "subworkflows/fastx_map_long_reads"
    tag "fastxalign"
    tag "fastxalign/pyfastxindex"
    tag "fastxalign/minimap2align"
    tag "subworkflows/../../modules/nf-core/minimap2/index"
    tag "subworkflows/bam_samtools_merge_markdup"


    config "./nextflow.config"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall(
            "${launchDir}/library/",
            [
                "minimap2/index",
                "samtools/merge",
                "samtools/markdup",
                "samtools/faidx"
            ]
        )
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules/")
    }

    test("Undibacterium unclassified - fasta - paf") {

        when {

            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.unscaffolded.fa.gz', checkIfExists: true),
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                ])
                input[2] = 200
                input[3] = false
                """
            }
        }
        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.paf,
                    workflow.out.versions
                ).match() }
            )
        }
        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("Undibacterium unclassified - fasta - bam") {

        when {

            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/assembly/draft/baUndUnlc1.hic.hap1.p_ctg.unscaffolded.fa.gz', checkIfExists: true),
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'Undibacterium_unclassified/genomic_data/baUndUnlc1/pacbio/fasta/HiFi.reads.fasta', checkIfExists: true),
                ])
                input[2] = 200
                input[3] = true
                """
            }
        }
        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.bam.collect { bam(it.get(1)).getStatistics() },
                    workflow.out.versions
                ).match() }
            )
        }
        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

}
