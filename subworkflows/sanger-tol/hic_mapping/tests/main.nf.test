nextflow_workflow {

    name "Test Subworkflow HIC_MAPPING"
    script "../main.nf"
    workflow "HIC_MAPPING"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_sangertol"
    tag "subworkflows/hic_mapping"
    tag "cramalign/gencramchunks"
    tag "cramalign/bwamem2alignhic"
    tag "cramalign/minimap2alignhic"
    tag "subworkflows/../../modules/nf-core/samtools/markdup"
    tag "subworkflows/../../modules/nf-core/minimap2/index"
    tag "subworkflows/../../modules/nf-core/samtools/merge"
    tag "subworkflows/../../modules/nf-core/samtools/index"
    tag "subworkflows/../../modules/nf-core/samtools/faidx"
    tag "subworkflows/../../modules/nf-core/bwamem2/index"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall(
            "${launchDir}/library/",
            [
                "bwamem2/index",
                "minimap2/index",
                "samtools/index",
                "samtools/merge",
                "samtools/markdup",
                "samtools/faidx"
            ]
        )
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules/")
    }

    test("meles meles - bwamem2") {

        when {

            params {
                samtools_cat_args = ""
                samtools_fastq_args = "-F0xB00 -nt"
                bwamem2_mem_args = "-5SPp"
                samtools_fixmate_args = "-mpu"
                samtools_view_args = "-q 0 -F 0x904"
                samtools_sort_args = "--write-index -l1"
            }

            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'Meles_meles/assembly/release/mMelMel3.1_paternal_haplotype/GCA_922984935.2.subset.fasta.gz', checkIfExists: true)
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id:'test' ],
                        file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/hic-arima2/35528_2%231_subset.cram', checkIfExists: true)
                    ]
                )
                input[2] = "bwamem2"
                input[3] = 1
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.bam.size() == 1 },
                {
                    assert snapshot(
                        workflow.out.bam.collect { bam(it.get(1)).getStatistics() }.sort(),
                        workflow.out.versions
                    ).match()
                }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("meles meles - bwamem2 - multiple samples") {

        when {

            params {
                samtools_cat_args = ""
                samtools_fastq_args = "-F0xB00 -nt"
                bwamem2_mem_args = "-5SPp"
                samtools_fixmate_args = "-mpu"
                samtools_view_args = "-q 0 -F 0x904"
                samtools_sort_args = "--write-index -l1"
            }

            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'Meles_meles/assembly/release/mMelMel3.1_paternal_haplotype/GCA_922984935.2.subset.fasta.gz', checkIfExists: true)
                    ],
                    [
                        [ id:'test2' ], // meta map
                        file(params.modules_testdata_base_path + 'Meles_meles/assembly/release/mMelMel3.1_paternal_haplotype/GCA_922984935.2.subset.fasta.gz', checkIfExists: true)
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id:'test' ],
                        file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/hic-arima2/35528_2%231_subset.cram', checkIfExists: true)
                    ],
                    [
                        [ id:'test2' ],
                        file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/hic-arima2/35528_2%231_subset.cram', checkIfExists: true)
                    ]
                )
                input[2] = "bwamem2"
                input[3] = 1
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.bam.size() == 2 },
                {
                    assert snapshot(
                        workflow.out.bam.collect { bam(it.get(1)).getStatistics() }.sort(),
                        workflow.out.versions
                    ).match()
                }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("meles meles - bwamem2 - multiple samples - meta mismatch") {

        when {

            params {
                samtools_cat_args = ""
                samtools_fastq_args = "-F0xB00 -nt"
                bwamem2_mem_args = "-5SPp"
                samtools_fixmate_args = "-mpu"
                samtools_view_args = "-q 0 -F 0x904"
                samtools_sort_args = "--write-index -l1"
            }

            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'Meles_meles/assembly/release/mMelMel3.1_paternal_haplotype/GCA_922984935.2.subset.fasta.gz', checkIfExists: true)
                    ],
                    [
                        [ id:'test2' ], // meta map
                        file(params.modules_testdata_base_path + 'Meles_meles/assembly/release/mMelMel3.1_paternal_haplotype/GCA_922984935.2.subset.fasta.gz', checkIfExists: true)
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id:'test' ],
                        file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/hic-arima2/35528_2%231_subset.cram', checkIfExists: true)
                    ],
                    [
                        [ id:'test3' ],
                        file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/hic-arima2/35528_2%231_subset.cram', checkIfExists: true)
                    ]
                )
                input[2] = "bwamem2"
                input[3] = 1
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.bam.size() == 1 },
                {
                    assert snapshot(
                        workflow.out.bam.collect { bam(it.get(1)).getStatistics() }.sort(),
                        workflow.out.versions
                    ).match()
                }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("meles meles - minimap2") {

        when {
            params {
                samtools_cat_args     = ""
                samtools_fastq_args   = "-F0xB00 -nt"
                minimap2_args         = "-ax sr"
                samtools_fixmate_args = "-mpu"
                samtools_view_args    = "-q 0 -F 0x904"
                samtools_sort_args    = "--write-index -l1"
            }

            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'Meles_meles/assembly/release/mMelMel3.1_paternal_haplotype/GCA_922984935.2.subset.fasta.gz', checkIfExists: true)
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id:'test' ],
                        file(params.modules_testdata_base_path + 'Meles_meles/genomic_data/mMelMel3/hic-arima2/35528_2%231_subset.cram', checkIfExists: true)
                    ]
                )
                input[2] = "minimap2"
                input[3] = 1
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.bam.size() == 1 },
                {
                    assert snapshot(
                        workflow.out.bam.collect { bam(it.get(1)).getStatistics() }.sort(),
                        workflow.out.versions
                    ).match()
                }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

}
