nextflow_workflow {

    name "Test Subworkflow TELO_FINDER"
    script "../main.nf"
    config "./nextflow.config"
    workflow "TELO_FINDER"

    tag "subworkflows"
    tag "subworkflows_sangertol"
    tag "subworkflows/telo_finder"
    tag "telomere/regions"
    tag "telomere/windows"
    tag "telomere/extract"
    tag "subworkflows/../../modules/nf-core/gawk"
    tag "subworkflows/../../modules/nf-core/gunzip"
    tag "modules/nf-core/gunzip"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall(
            "${launchDir}/library/",
            [
                "gawk",
                "gunzip"
            ]
        )
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules/")

        run("GUNZIP"){
            script "../../../../modules/nf-core/gunzip/main.nf"
            process {
                """
                input[0] = [
                    [ id: "idFanCani4" ],
                    file(params.modules_testdata_base_path + 'resources/modules/telomere/idFanCani4/idFanCani4.subset_genome.fa.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("idFanCani4 - no split - fasta") {
        when {
            params {
                gawk_args       = "'BEGIN { FS=\"\\t\"; OFS=\"\\t\" } {print > \"direction.\"\$3\".split.telomere\"}'"
                windows_percent = "99.9"
            }

            workflow {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = "TTAGG"
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("idFanCani4 - split - fasta") {
        when {
            params {
                gawk_args       = "'BEGIN { FS=\"\\t\"; OFS=\"\\t\" } {print > \"direction.\"\$3\".split.telomere\"}'"
                windows_percent = "99.9"
            }

            workflow {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = "TTAGG"
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                {
                    def files = workflow.out.bedgraph_file.flatten()[1..3]

                    def bedgraph_files = [
                        "idFanCani4_0P_telomere.bedgraph":path(files.find { file(it).name.contains("idFanCani4_0P_telomere.bedgraph") }).md5,
                        "idFanCani4_3P_telomere.bedgraph":path(files.find { file(it).name.contains("idFanCani4_3P_telomere.bedgraph") }).md5,
                        "idFanCani4_5P_telomere.bedgraph":path(files.find { file(it).name.contains("idFanCani4_5P_telomere.bedgraph") }).md5
                    ]

                    assert snapshot(
                        files.size() == 3,
                        bedgraph_files,
                        workflow.out.versions
                    ).match()
                }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("idFanCani4 - no split - fasta - stub") {
        when {
            params {
                gawk_args       = "'BEGIN { FS=\"\\t\"; OFS=\"\\t\" } {print > \"direction.\"\$3\".split.telomere\"}'"
                windows_percent = "99.9"
            }

            workflow {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = "TTAGG"
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }

        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }
}
